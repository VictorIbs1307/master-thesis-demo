{"version":3,"sources":["index.ts"],"names":[],"mappings":";AAuKM,aAjKN,IAAI,EAAc,SAAS,cAAgC,cAEvD,EAAc,SAAS,iBAAmC,oBAC1D,EAAS,SAAS,iBAAmC,cACrD,EAAU,SAAS,iBAAmC,eACtD,EAAqB,SAAS,iBAAmC,4BACjE,EAAc,SAAS,iBAAmC,mBAC1D,EAAgB,SAAS,cAAgC,oBACzD,EAAyB,SAAS,iBAAmC,8BAErE,EAAoB,SAAS,iBAAmC,0BAChE,EAAc,SAAS,iBAAmC,oBAC1D,EAAe,SAAS,iBAAmC,qBAC3D,EAA2B,SAAS,iBAAmC,kCACvE,EAAqB,SAAS,cAAgC,0BAC9D,EAAa,SAAS,cAAgC,SAO1D,SAAA,IAOI,IAAS,IAAA,EAAA,SAAA,GACL,EAAY,GAAG,iBAAiB,QAAS,WACrC,EAAkB,GAAG,MAAQ,EAAY,GAAG,MAC5C,MACD,IAJE,EAAI,EAAG,EAAI,EAAY,OAAQ,IAA/B,EAAA,GAOA,IAAA,EAAA,SAAA,GACL,EAAO,GAAG,iBAAiB,QAAS,WAChC,EAAY,GAAG,MAAQ,EAAO,GAAG,MACjC,MACD,IAJP,IAAS,EAAI,EAAG,EAAI,EAAO,OAAQ,IAA1B,EAAA,GAOA,IAAA,EAAA,SAAA,GACL,EAAQ,GAAG,iBAAiB,QAAS,WACjC,EAAa,GAAG,MAAQ,EAAQ,GAAG,MACnC,MACD,IAJP,IAAS,EAAI,EAAG,EAAI,EAAQ,OAAQ,IAA3B,EAAA,GAOA,IAAA,EAAA,SAAA,GACL,EAAmB,GAAG,iBAAiB,QAAS,WAC5C,EAAyB,GAAG,MAAQ,EAAmB,GAAG,MAC1D,MACD,IAJP,IAAS,EAAI,EAAG,EAAI,EAAmB,OAAQ,IAAtC,EAAA,GAOT,IAAS,EAAI,EAAG,EAAI,EAAY,OAAQ,IACpC,EAAY,GAAG,iBAAiB,SAAU,WACtC,MAIR,IAAS,EAAI,EAAG,EAAI,EAAuB,OAAQ,IAC/C,EAAuB,GAAG,iBAAiB,SAAU,WACjD,MAIR,EAAc,iBAAiB,QAAS,WACpC,EAAoB,MAAQ,EAAe,MAC3C,MACD,GAEH,EAAW,iBAAiB,QAAS,WACjC,IAAM,EAAS,SAAS,eAAe,YACjC,EAAW,OAAO,OAAO,mBAAoB,aACnD,GAAI,EAAU,CACV,IAAM,EAAe,SAAS,cAAc,KAC5C,EAAa,aAAa,WAAY,GACtC,IAAM,EAAU,EAAO,UAAU,aACjC,EAAa,aAAa,OAAQ,GAClC,EAAa,WASzB,SAAA,IAGI,QAAQ,IAAI,QAmEhB","file":"src.ee7ad9e7.js","sourceRoot":"../src","sourcesContent":["// #region imports\n/* import { importFileInit } from \"./ts/importFile\"\nimport { Filter } from \"./ts/filter\";\nimport { Illustrator } from \"./ts/illustrations\";  */\n// #endregion\n// #region variables\nlet resetButton = document.querySelector<HTMLInputElement>('#reset-all');\n\nlet kernelSizes = document.querySelectorAll<HTMLInputElement>('[id=kernal-size]');\nlet sigmas = document.querySelectorAll<HTMLInputElement>('[id=sigma]');\nlet sigmas2 = document.querySelectorAll<HTMLInputElement>('[id=sigma2]');\nlet timeFiltersApllied = document.querySelectorAll<HTMLInputElement>('[id=time-filter-applied]');\nlet filterTypes = document.querySelectorAll<HTMLInputElement>('[id=filterType]');\nlet imageRowSlice = document.querySelector<HTMLInputElement>('#image-row-slice');\nlet blurOrSharpenCheckboxs = document.querySelectorAll<HTMLInputElement>('[id=blurOrSharpenCheckbox]');\n\nlet kernalSizesValues = document.querySelectorAll<HTMLInputElement>('[id=kernal-size-value]');\nlet sigmaValues = document.querySelectorAll<HTMLInputElement>('[id=sigma-value]');\nlet sigmaValues2 = document.querySelectorAll<HTMLInputElement>('[id=sigma-value2]');\nlet timeFiltersAplliedValues = document.querySelectorAll<HTMLInputElement>('[id=time-filter-applied-value]');\nlet imageRowSliceValue = document.querySelector<HTMLInputElement>('#image-row-slice-value');\nlet saveButton = document.querySelector<HTMLInputElement>('#save');\n\n/* let filter = new Filter();\nlet illustrator = new Illustrator();\n */\n// #endregion\n\nfunction init() {\n    /* importFileInit(imageRowSlice!); */\n\n   /*  resetButton.addEventListener(\"click\", function() {\n        resetAllOptions();\n    }); */\n\n    for (let i = 0; i < kernelSizes.length; i++) {\n        kernelSizes[i].addEventListener('input', function() {\n            kernalSizesValues[i].value = kernelSizes[i].value;\n            update();\n        }, false);\n    };\n\n    for (let i = 0; i < sigmas.length; i++) {\n        sigmas[i].addEventListener('input', function() {\n            sigmaValues[i].value = sigmas[i].value;\n            update();\n        }, false);\n    };\n\n    for (let i = 0; i < sigmas2.length; i++) {\n        sigmas2[i].addEventListener('input', function() {\n            sigmaValues2[i].value = sigmas2[i].value;\n            update();\n        }, false);\n    };\n\n    for (let i = 0; i < timeFiltersApllied.length; i++) {\n        timeFiltersApllied[i].addEventListener('input', function() {\n            timeFiltersAplliedValues[i].value = timeFiltersApllied[i].value;\n            update();\n        }, false);\n    };\n\n    for (let i = 0; i < filterTypes.length; i++) {\n        filterTypes[i].addEventListener(\"change\", () => {\n            update();\n        });\n    };\n\n    for (let i = 0; i < blurOrSharpenCheckboxs.length; i++) {\n        blurOrSharpenCheckboxs[i].addEventListener(\"change\", () => {\n            update();\n        });\n    };\n\n    imageRowSlice.addEventListener('input', function() {\n        imageRowSliceValue!.value = imageRowSlice!.value;\n        update();\n    }, false);\n\n    saveButton.addEventListener('click', () => {\n        const canvas = document.getElementById(\"Mycanvas\") as HTMLCanvasElement;\n        const filename = window.prompt('Enter a filename', 'image.png');\n        if (filename) {\n            const downloadLink = document.createElement('a');\n            downloadLink.setAttribute('download', filename);\n            const dataURL = canvas.toDataURL('image/png');\n            downloadLink.setAttribute('href', dataURL);\n            downloadLink.click();\n        }\n    });\n\n/*     illustrator.initKernelGraph();\n    illustrator.initFrequencyGraph();  */\n}\n\n\nfunction update() {\n    /* createKernels();\n    applyKernel();  */\n    console.log(\"hi!!\");\n}\n\n/* function createKernels(){\n    filter.kernels.forEach((kernel, i: number) => {\n        kernel.subtract = blurOrSharpenCheckboxs[i].checked;\n        \n        switch (filterTypes[i].value) {\n            case \"gauss\":\n                kernel.initGauss(parseFloat(sigmas[i].value), parseFloat(sigmas2[i].value), parseFloat(kernelSizes[i].value));\n                break;\n            case \"boxBlur\":\n                kernel.initBoxKernel(parseFloat(kernelSizes[i].value));\n                break;\n            default:\n                console.log(\"Invalid filter type\");\n                break;\n        } \n    });\n    \n}\n\nfunction applyKernel() {\n    // Get data from imported image\n    const canvas = document.getElementById(\"Mycanvas\") as HTMLCanvasElement;\n    var context = canvas.getContext('2d');\n    var pixels = context!.getImageData(0, 0, canvas.width, canvas.height);\n\n    //filter.applyToImage(pixels);\n    illustrator.generatKernelGraph(filter.kernels);\n    illustrator.generatFrequencyGraph(pixels, parseInt(imageRowSlice!.value));\n\n    // Show the processed image\n    const canvas2 = document.getElementById(\"ProcessCanvas\") as HTMLCanvasElement;\n    var context = canvas2.getContext('2d');\n    context.putImageData(pixels, 0, 0);\n}\n\nfunction resetAllOptions() {\n    for (let i = 0; i < kernelSizes.length; i++) {\n        kernalSizesValues[i].value = \"0\";\n        kernelSizes[i].value = \"0\";\n    };\n\n    for (let i = 0; i < sigmas.length; i++) {\n        sigmaValues[i].value = \"0\";\n        sigmas[i].value = \"0\";\n    };\n\n    for (let i = 0; i < timeFiltersApllied.length; i++) {\n        timeFiltersAplliedValues[i].value = \"0\";\n        timeFiltersApllied[i].value = \"0\";\n    };\n    imageRowSliceValue!.value = \"0\";\n    imageRowSlice!.value = \"0\";\n\n    // Get data from imported image\n    const canvas = document.getElementById(\"Mycanvas\") as HTMLCanvasElement;\n    var context = canvas.getContext('2d');\n    var pixels = context!.getImageData(0, 0, canvas.width, canvas.height);\n\n    // Show the processed image\n    const canvas2 = document.getElementById(\"ProcessCanvas\") as HTMLCanvasElement;\n    var context = canvas2.getContext('2d');\n    context.putImageData(pixels, 0, 0);\n}\n */\ninit() "]}