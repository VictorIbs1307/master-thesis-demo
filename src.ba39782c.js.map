{"version":3,"sources":["ts/importFile.ts","ts/illustrations.ts","index.ts"],"names":[],"mappings":"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","file":"src.ba39782c.js","sourceRoot":"../src","sourcesContent":["export function importFileInit(imageRowSlice: HTMLInputElement) {\n    const input = document.querySelector('input[type=file]') as HTMLInputElement;\n    input.addEventListener('change', function(evt) {\n        const source = (evt.target as HTMLInputElement).files![0];\n        const image = new Image();\n\n        image.onload = function() {\n            imageRowSlice.max = String(image.height);\n            drawFrame(this as HTMLImageElement | HTMLVideoElement);\n        }\n        image.onerror = function() {\n            console.log(\"error loading image!\");\n        }\n        window.URL.revokeObjectURL(image.src);\n        image.src = window.URL.createObjectURL(source);\n    }, false);\n}\n\n\nfunction drawFrame(source: HTMLImageElement | HTMLVideoElement) {\n    var MAX_WIDTH = 800;\n    var MAX_HEIGHT = 800;\n    var width, height;\n    if ('naturalWidth' in source) { // Check if source is an HTMLImageElement\n        width = source.naturalWidth;\n        height = source.naturalHeight;\n      } else { // Otherwise, assume source is an HTMLVideoElement\n        width = source.videoWidth;\n        height = source.videoHeight;\n      }\n\n    // Change the resizing logic\n    if (width > height) {\n        if (width > MAX_WIDTH) {\n            height = height * (MAX_WIDTH / width);\n            width = MAX_WIDTH;\n        }\n    } else {\n        if (height > MAX_HEIGHT) {\n            width = width * (MAX_HEIGHT / height);\n            height = MAX_HEIGHT;\n        }\n    }\n\n    const canvas = document.getElementById(\"Mycanvas\") as HTMLCanvasElement;\n    const context = canvas.getContext(\"2d\");\n    const canvas2 = document.getElementById(\"ProcessCanvas\") as HTMLCanvasElement;\n    const context2 = canvas.getContext(\"2d\");\n\n    canvas.width = width;\n    canvas.height = height;\n    context!.drawImage(source, 0, 0, width, height);\n    canvas2.width = width\n    canvas2.height = height;\n    context2!.drawImage(source, 0, 0, width, height);\n}","import { Kernel } from \"./kernel\"\n\n/* import Plotly, { PlotlyHTMLElement } from 'plotly.js-dist'; */\n\nexport class Illustrator {\n    plotColors \n    plotNames \n    plotDefaultConfig\n    plotDefaultKernelLayout\n    plotDefaultFrequencyLayout\n\n\n\n    constructor() {\n        this.plotColors = ['rgb(255, 0, 0)', 'rgb(0, 255, 0)', 'rgb(0, 0, 255)', 'rgb(148,0,211)'];\n        this.plotNames = ['Red', 'Green', 'Blue', 'Alpha'];\n\n        this.plotDefaultConfig = {\n            displayModeBar: false,\n        };\n\n        this.plotDefaultKernelLayout = {\n            xaxis: { range: [0, 1] },\n            yaxis: { range: [0, 1] }\n        };\n\n        this.plotDefaultFrequencyLayout = {\n            yaxis: { range: [-10, 256] }\n        };\n    }\n\n    \n\n    initKernelGraph(){\n        const plotting_data: string | any[] = [[null], [null], [null]];\n        const plotting_labels: any[] = [[null], [null], [null]];\n\n        var plotData = []\n        for (var i = 0; i < plotting_data.length; i++) {\n            plotData.push({\n                x: plotting_labels[i],\n                y: plotting_data[i],\n                name: this.plotNames[i],\n                line: { shape: 'spline', color: this.plotColors[i] },\n                type: 'scatter'\n            });\n        }   \n        \n        /* Plotly.newPlot('myDiv', plotData, this.plotDefaultKernelLayout, this.plotDefaultConfig); */\n    }\n\n    initFrequencyGraph(){\n        const plotting_data: string | any[] = [[null], [null], [null], [null]];\n        const plotting_labels: any[] = [[null], [null], [null], [null]];\n\n        var plotData = []\n        for (var i = 0; i < plotting_data.length; i++) {\n            plotData.push({\n                x: plotting_labels[i],\n                y: plotting_data[i],\n                name: this.plotNames[i],\n                line: { shape: 'spline', color: this.plotColors[i] },\n                type: 'scatter'\n            });\n        }   \n        /* Plotly.newPlot('myPlot2', plotData, this.plotDefaultFrequencyLayout, this.plotDefaultConfig); */\n    }\n\n    generatKernelGraph(kernels: Kernel[]) {\n        var plotting_data: (number[] | null[])[] = [];\n        var plotting_labels: (number[] | null[])[]= [];\n        kernels.forEach(kernel_ => {\n            const kernel = kernel_.self;\n            if (kernel.length == 0) {\n                plotting_data.push([null]);\n                plotting_labels.push([null]);\n                return;\n            }\n\n            var xyValues = [];\n            var xValues: number[] = [];\n            var yValues = [];\n            for (var i = 0; i < kernel.length; i++) {\n                xyValues.push({ x: i / (kernel.length - 1), y: kernel[i] });\n                xValues.push(i / (kernel.length - 1));\n                yValues.push(kernel[i]);\n            }\n            var k = [];\n            for (var i = 0; i < kernel.length; i++) {\n                k.push(kernel[i] / kernel[0]);\n            }\n\n            var k_t = []\n            for (var i = 0; i < k.length; i++) {\n                k_t.push([k[i]])\n            };\n\n            var k_m = this.multiply(k_t, [k]);\n\n            var k_m_sum = k_m.reduce(function(a, b) { return a.concat(b) })\n                .reduce(function(a: number, b: number) { return a + b });\n\n            for (var row = 0; row < k_m.length; row++) {\n                for (var col = 0; col < k_m[0].length; col++) {\n                    k_m[row][col] = k_m[row][col] / k_m_sum;\n                }\n            }\n            plotting_data.push(yValues);\n            plotting_labels.push(xValues);\n        });\n        \n        /*var plotData = []\n        \n        const allTraces = (document.getElementById('myDiv') as PlotlyHTMLElement).data;\n        const trace = allTraces.filter((trace: Plotly.scatter) => trace.visible === true);\n\n        for (var i = 0; i < plotting_data.length; i++) {\n            let isTraceVisible = true;\n\n            if (trace.length != 0)\n                isTraceVisible = trace.some((trace: Plotly.scatter) => trace.name === this.plotNames[i]);\n\n            plotData.push({\n                x: plotting_labels[i],\n                y: plotting_data[i],\n                name: this.plotNames[i],\n                line: { shape: 'spline', color: this.plotColors[i] },\n                type: 'scatter',\n                visible: isTraceVisible ? true : \"legendonly\"\n            });\n        }\n        \n        Plotly.react('myDiv', plotData, this.plotDefaultKernelLayout, this.plotDefaultConfig ); */\n    }  \n\n    multiply(a: number[][], b: number[][]) {\n        var aNumRows = a.length,\n            aNumCols = a[0].length,\n            /* bNumRows = b.length, */\n            bNumCols = b[0].length,\n            m = new Array(aNumRows); // initialize array of rows\n        for (var r = 0; r < aNumRows; ++r) {\n            m[r] = new Array(bNumCols); // initialize the current row\n            for (var c = 0; c < bNumCols; ++c) {\n                m[r][c] = 0; // initialize the current cell\n                for (var i = 0; i < aNumCols; ++i) {\n                    m[r][c] += a[r][i] * b[i][c];\n                }\n            }\n        }\n        return m;\n    }\n\n    generatFrequencyGraph(pixels: ImageData, row: number) {\n        var data = pixels.data;\n        var w = pixels.width;\n\n        var red = new Array();\n        var green = new Array();\n        var blue = new Array();\n        var alpha = new Array();\n\n        var xValues = [];\n        //Read image and make changes on the fly as it's read  \n        for (var i = 0 + w * row; i < w * (row + 1); i += 1) {\n            xValues.push(i - w * row);\n            red[i - w * row] = data[i * 4];\n            green[i - w * row] = data[i * 4 + 1];\n            blue[i - w * row] = data[i * 4 + 2]; // no change, blue == 0 for black and for yellow\n            alpha[i - w * row] = data[i * 4 + 3]; // Again, no change\n        }\n\n        /* var plotData = [];\n        var plotting_data = [red, green, blue, alpha];\n        var plotting_labels = [xValues, xValues, xValues, xValues];\n\n        const allTraces = (document.getElementById('myPlot2') as PlotlyHTMLElement).data;\n        const trace = allTraces.filter((trace: Plotly.scatter) => trace.visible === true);\n\n        for (var i = 0; i < plotting_data.length; i++) {\n            let isTraceVisible = true;\n\n            if (trace.length != 0)\n                isTraceVisible = trace.some((trace: Plotly.scatter) => trace.name === this.plotNames[i]);\n\n            plotData.push({\n                x: plotting_labels[i],\n                y: plotting_data[i],\n                name: this.plotNames[i],\n                line: { color: this.plotColors[i] },\n                type: 'scatter',\n                visible: isTraceVisible ? true : \"legendonly\"\n            });\n        }\n\n        Plotly.react('myPlot2', plotData, this.plotDefaultFrequencyLayout, this.plotDefaultConfig); */\n\n        // Write the image back to the canvas\n        for (var i = 0 + w * (row - 1); i < w * row; i += 1) {\n            data[i * 4] = 0;\n            data[i * 4 + 1] = 0;\n            data[i * 4 + 2] = 0;\n            data[i * 4 + 3] = 255;\n        }\n\n        for (var i = 0 + w * (row + 2); i < w * (row + 3); i += 1) {\n            data[i * 4] = 0;\n            data[i * 4 + 1] = 0;\n            data[i * 4 + 2] = 0;\n            data[i * 4 + 3] = 255;\n        }\n    }\n}","// #region imports\nimport { importFileInit } from \"./ts/importFile\"\n/* import { Filter } from \"./ts/filter\";*/\nimport { Illustrator } from \"./ts/illustrations\";  \n// #endregion\n// #region variables\nlet resetButton = document.querySelector<HTMLInputElement>('#reset-all');\n\nlet kernelSizes = document.querySelectorAll<HTMLInputElement>('[id=kernal-size]');\nlet sigmas = document.querySelectorAll<HTMLInputElement>('[id=sigma]');\nlet sigmas2 = document.querySelectorAll<HTMLInputElement>('[id=sigma2]');\nlet timeFiltersApllied = document.querySelectorAll<HTMLInputElement>('[id=time-filter-applied]');\nlet filterTypes = document.querySelectorAll<HTMLInputElement>('[id=filterType]');\nlet imageRowSlice = document.querySelector<HTMLInputElement>('#image-row-slice');\nlet blurOrSharpenCheckboxs = document.querySelectorAll<HTMLInputElement>('[id=blurOrSharpenCheckbox]');\n\nlet kernalSizesValues = document.querySelectorAll<HTMLInputElement>('[id=kernal-size-value]');\nlet sigmaValues = document.querySelectorAll<HTMLInputElement>('[id=sigma-value]');\nlet sigmaValues2 = document.querySelectorAll<HTMLInputElement>('[id=sigma-value2]');\nlet timeFiltersAplliedValues = document.querySelectorAll<HTMLInputElement>('[id=time-filter-applied-value]');\nlet imageRowSliceValue = document.querySelector<HTMLInputElement>('#image-row-slice-value');\nlet saveButton = document.querySelector<HTMLInputElement>('#save');\n\n/* let filter = new Filter();*/\nlet illustrator = new Illustrator();\n \n// #endregion\n\nfunction init() {\n    importFileInit(imageRowSlice!);\n\n    resetButton!.addEventListener(\"click\", function() {\n        resetAllOptions();\n    });\n\n    for (let i = 0; i < kernelSizes.length; i++) {\n        kernelSizes[i].addEventListener('input', function() {\n            kernalSizesValues[i].value = kernelSizes[i].value;\n            update();\n        }, false);\n    };\n\n    for (let i = 0; i < sigmas.length; i++) {\n        sigmas[i].addEventListener('input', function() {\n            sigmaValues[i].value = sigmas[i].value;\n            update();\n        }, false);\n    };\n\n    for (let i = 0; i < sigmas2.length; i++) {\n        sigmas2[i].addEventListener('input', function() {\n            sigmaValues2[i].value = sigmas2[i].value;\n            update();\n        }, false);\n    };\n\n    for (let i = 0; i < timeFiltersApllied.length; i++) {\n        timeFiltersApllied[i].addEventListener('input', function() {\n            timeFiltersAplliedValues[i].value = timeFiltersApllied[i].value;\n            update();\n        }, false);\n    };\n\n    for (let i = 0; i < filterTypes.length; i++) {\n        filterTypes[i].addEventListener(\"change\", () => {\n            update();\n        });\n    };\n\n    for (let i = 0; i < blurOrSharpenCheckboxs.length; i++) {\n        blurOrSharpenCheckboxs[i].addEventListener(\"change\", () => {\n            update();\n        });\n    };\n\n    imageRowSlice!.addEventListener('input', function() {\n        imageRowSliceValue!.value = imageRowSlice!.value;\n        update();\n    }, false);\n\n    saveButton!.addEventListener('click', () => {\n        const canvas = document.getElementById(\"Mycanvas\") as HTMLCanvasElement;\n        const filename = window.prompt('Enter a filename', 'image.png');\n        if (filename) {\n            const downloadLink = document.createElement('a');\n            downloadLink.setAttribute('download', filename);\n            const dataURL = canvas.toDataURL('image/png');\n            downloadLink.setAttribute('href', dataURL);\n            downloadLink.click();\n        }\n    });\n\n    illustrator.initKernelGraph();\n    illustrator.initFrequencyGraph();  \n}\n\n\nfunction update() {\n    /* createKernels();\n    applyKernel();  */\n    console.log(\"hi!!\");\n}\n\n/* function createKernels(){\n    filter.kernels.forEach((kernel, i: number) => {\n        kernel.subtract = blurOrSharpenCheckboxs[i].checked;\n        \n        switch (filterTypes[i].value) {\n            case \"gauss\":\n                kernel.initGauss(parseFloat(sigmas[i].value), parseFloat(sigmas2[i].value), parseFloat(kernelSizes[i].value));\n                break;\n            case \"boxBlur\":\n                kernel.initBoxKernel(parseFloat(kernelSizes[i].value));\n                break;\n            default:\n                console.log(\"Invalid filter type\");\n                break;\n        } \n    });\n    \n}\n\nfunction applyKernel() {\n    // Get data from imported image\n    const canvas = document.getElementById(\"Mycanvas\") as HTMLCanvasElement;\n    var context = canvas.getContext('2d');\n    var pixels = context!.getImageData(0, 0, canvas.width, canvas.height);\n\n    //filter.applyToImage(pixels);\n    illustrator.generatKernelGraph(filter.kernels);\n    illustrator.generatFrequencyGraph(pixels, parseInt(imageRowSlice!.value));\n\n    // Show the processed image\n    const canvas2 = document.getElementById(\"ProcessCanvas\") as HTMLCanvasElement;\n    var context = canvas2.getContext('2d');\n    context.putImageData(pixels, 0, 0);\n}\n*/\nfunction resetAllOptions() {\n    for (let i = 0; i < kernelSizes.length; i++) {\n        kernalSizesValues[i].value = \"0\";\n        kernelSizes[i].value = \"0\";\n    };\n\n    for (let i = 0; i < sigmas.length; i++) {\n        sigmaValues[i].value = \"0\";\n        sigmas[i].value = \"0\";\n    };\n\n    for (let i = 0; i < timeFiltersApllied.length; i++) {\n        timeFiltersAplliedValues[i].value = \"0\";\n        timeFiltersApllied[i].value = \"0\";\n    };\n    imageRowSliceValue!.value = \"0\";\n    imageRowSlice!.value = \"0\";\n\n    // Get data from imported image\n    const canvas = document.getElementById(\"Mycanvas\") as HTMLCanvasElement;\n    var context = canvas.getContext('2d');\n    var pixels = context!.getImageData(0, 0, canvas.width, canvas.height);\n\n    // Show the processed image\n    const canvas2 = document.getElementById(\"ProcessCanvas\") as HTMLCanvasElement;\n    var context = canvas2.getContext('2d');\n    context!.putImageData(pixels, 0, 0);\n}\n \ninit() "]}